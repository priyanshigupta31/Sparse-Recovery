from scipy.sparse import random
from scipy.stats import rv_continuous
from numpy.random import default_rng
import numpy as np
import pandas as pd

m = 30
l = 3
k = 10
s = 1000


A = np.array([[0.0277, -0.2871, 0.1498, 0.4514, -0.0629, 0.1302, 0.1116, 0.1357, -0.0647, -0.0499, 0.0128, 0.0417, 0.0711,
              -0.3117, -0.0765, 0.0728, -0.2438 , -0.0410, 0.0281, -0.0254, 0.0090, 0.0281,  0.4534,  0.0208,  0.0991,
              0.1650, -0.1413, -0.3931, 0.1806, 0.0568],
             [-0.2070,    0.0189,    0.0788,    0.2315,   -0.0998,    0.0954,   -0.1679,    0.1156,    0.3707,    0.1011 ,
              0.0070 ,   0.1578 ,  -0.1947,   -0.0372,    0.3154,    0.0240 ,   0.0963,    0.0846,   -0.1117, -0.3664,
              0.3664,   -0.1924 ,  -0.1552,    0.1809  , -0.0120,   -0.2321,   -0.1730,   -0.0362 ,   0.1434 ,  -0.1654],
             [0.0079 ,   0.1728 ,   0.3119,    0.0851 ,  -0.1054 ,  -0.0606,    0.0091   , 0.3589,   -0.2790,    0.2567,
              -0.1010 ,  -0.1075,   -0.3284,    0.0844,   -0.1178,    0.3613 ,   0.0854  , -0.0221 ,   0.0155, 0.1705 ,
              -0.2402 ,  -0.0466,   -0.0633 ,   0.1929 ,  -0.0224 ,   0.0351 ,  -0.3131,    0.2081 ,   0.1108,   -0.0589],
             [-0.0462,   -0.2182,    0.0608,   -0.1690 ,  -0.1594 ,   0.2690 ,   0.2227,   -0.0279,   -0.0206 ,  -0.1566,
              -0.1949 ,   0.1939 ,  -0.1224,   -0.2263,   -0.1711 ,  -0.1704,   -0.2033,    0.2026 ,   0.0583,  0.2470,
              0.0729,   -0.4000,   -0.2352,    0.0427,    0.3211 ,   0.0474 ,  -0.0241,    0.2179,   -0.0392,   -0.1435],
             [-0.0095 ,  -0.0319 ,   0.2939 ,   0.0363,    0.3051,   -0.3290 ,   0.1054,    0.1206,   -0.0440 ,   0.0389,
              -0.4382 ,  -0.2214,   -0.1514,    0.0032 ,   0.0729 ,   0.0619 ,  -0.1522,    0.2733 ,  -0.0407, -0.0809,
              0.3181  , -0.0034 ,   0.0321,   -0.1019 ,   0.0819 ,  -0.0244 ,   0.3541,   -0.0202,   -0.1320 ,   0.1962],
             [-0.0261 ,   0.1705  ,  0.1693  , -0.0486 ,   0.0550  , -0.3133,    0.0219 ,  -0.0551  ,  0.4734  , -0.1428  ,
              0.0482  ,  0.0297 ,  -0.1794,   -0.2386 ,   0.1988,    0.0391 ,  -0.1631 ,  -0.1451  ,  0.0804 , 0.0465,
              -0.3748 ,  -0.0364 ,  -0.0589 ,  -0.3828 ,   0.1914 ,   0.0431 ,  -0.2398,   -0.0189 ,  -0.0675  ,  0.0883],
             [-0.0199  ,  0.2815 ,  -0.0828 ,   0.0552 ,  -0.1980  , -0.1206 ,   0.1341 ,  -0.2858 ,   0.0543   , 0.0201  ,
              -0.1562  ,  0.1544  , -0.1349,    0.4222 ,  -0.2169 ,   0.0751,   -0.2124 ,  -0.0954 ,  -0.1335  ,-0.1722 ,
              -0.1291 ,  -0.2163 ,   0.2455 ,  -0.0137  ,  0.1892 ,  -0.0485,    0.2440,   -0.0664 ,   0.3330  , -0.1332],
             [ -0.3631,   -0.0267 ,   0.1961 ,  -0.1965 ,   0.2578 ,  -0.0073 ,   0.2684 ,  -0.0211 ,  -0.1208 ,   0.3605  ,
               0.1597,    0.3132 ,  -0.1281,   -0.0401 ,  -0.0051,   -0.3446,    0.1908 ,   0.1049,   -0.2476, 0.0800 ,
               -0.1732 ,   0.1034 ,   0.0831 ,  -0.0152 ,   0.0273,   -0.1382 ,  -0.0010 ,  -0.2367,    0.0753,    0.0445],
             [-0.1818,   -0.0232,   -0.0381 ,   0.1814,   -0.0891 ,  -0.3565 ,   0.0375 ,   0.2319,   -0.0785,   -0.2761 ,
              0.0315,   -0.2391,    0.0647 ,  -0.0251,   -0.2550,   -0.3165,    0.3737 ,  -0.0116,   -0.1092, -0.0117,
              0.0356,   -0.3212,    0.0217 ,  -0.2756,   -0.1520 ,   0.0599,   -0.0476 ,  -0.0141,    0.0791,   -0.2512],
             [-0.0955 ,  -0.0667 ,  -0.0163  , -0.1276  ,  0.2259  , -0.0579 ,  -0.2017 ,   0.0235,   -0.3200 ,  -0.1038,
              -0.0271  ,  0.2629  ,  0.0628 ,  -0.1551  , -0.1259 ,   0.3827,   -0.1478,   -0.1591  ,  0.0431 , -0.1334,
              -0.0195,   -0.0965,   -0.0527,   -0.2158,   -0.0490,   -0.3999,    0.0121,   -0.1816,   -0.1972,   -0.3752]])


df1 = pd.DataFrame(columns = ['X', 'l', 'Y'])

class CustomDistribution(rv_continuous):
    def _rvs(self,  size=None, random_state=None):
        return random_state.standard_normal(size)


rng = default_rng()
X = CustomDistribution(seed=rng)
Y = X()  # get a frozen version of the distribution
# S = random(m, 1, density=l/m, random_state=rng, data_rvs=Y.rvs)
# print(S.A)


for i in range(s):
    S = random(m, 1, density=l / m, random_state=rng, data_rvs=Y.rvs)
    X_vector = S.A
    Y_vector = np.dot(A, X_vector)
    df1 = df1.append({'X': X_vector, 'l': l, 'Y': Y_vector}, ignore_index=True)
    

file_name = 'dataset.xlsx'

# saving the excel
df1.to_excel(file_name)